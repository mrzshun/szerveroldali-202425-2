"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    # users: [User!] @all

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    posts: [Post!]! @all
    post (id: ID @eq): Post @find

    categories: [Category!]! @all
    category (id: ID @eq): Category @find

    alma: String
    relatedPosts (id: Int!): [Post!]
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
    posts: [Post] @hasMany
}

type Mutation {
  createCategory(name: String!, style: Style!): Category! @create
  createCategory2(input: CreateCategoryInput @spread): Category! @create
  updateCategory(id: ID!, name: String!, style: Style!): Category! @update
  upsertCategory(id: ID, name: String!, style: Style!): Category! @upsert
  deleteCategory(id: ID! @whereKey): Category @delete


  createUser(
    name: String! @rules(apply:["unique:users,name"]),
    email: String!  @rules(apply:["email", "unique:users,email"]),
    password: String!
  ): User! @create
} 

input CreateCategoryInput {
  name: String!
  style: Style!
}

type Post {
  id: ID!
  title: String!
  description: String!
  text: String
  author: User @belongsTo
  categories: [Category!] @belongsToMany
}

type Category {
  id: ID!
  name: String!
  style: Style!
  posts: [Post] @belongsToMany
}

enum Style {  
  primary
  secondary
  success
  danger
  warning
  info
  dark
}